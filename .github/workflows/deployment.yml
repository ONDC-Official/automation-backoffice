name: ONDC Automation Backoffice Service Deployment

on:
  push:
    branches: ["release-staging"]
  workflow_dispatch:


jobs:
  ssh-ec2:
    runs-on: ubuntu-latest
    environment: 
          name: staging
          url: https://github.com
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: SSH Setup and Cloning Repository
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ./key.pem
          chmod 600 ./key.pem
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} -T <<EOF
          REPO_DIR=~/ONDC-automation-framework-staging/automation-backoffice
          echo "Removing existing repository directory if exists"
          rm -rf \$REPO_DIR
          echo "Cloning repository from release-staging branch"
          git clone --single-branch --branch release-staging https://github.com/ONDC-Official/automation-backoffice.git \$REPO_DIR
          EOF

      - name: Install Docker Compose (if not installed)
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          # Check if Docker Compose is installed
          if ! command -v docker-compose &> /dev/null
          then
            echo "Docker Compose not found. Installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          else
            echo "Docker Compose is already installed."
          fi
          EOF

      - name: Write secrets to .env on EC2
        run: |
          echo "Writing secrets to .env file"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework-staging/automation-backoffice
          echo "Writing environment variables to .env file"
          echo "VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}" >> \$REPO_DIR/frontend/.env
          echo "VITE_BASE_URL=${{ secrets.VITE_BASE_PATH }}" >> \$REPO_DIR/frontend/.env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> \$REPO_DIR/backend/.env
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> \$REPO_DIR/backend/.env
          echo "PORT=${{ secrets.PORT }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}" >> \$REPO_DIR/backend/.env
          echo "REDIS_USERNAME=${{ secrets.REDIS_USERNAME }}" >> \$REPO_DIR/backend/.env
          
          EOF

      - name: Verify docker-compose.yml files
        run: |
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework-staging/automation-backoffice
          # Check if docker-compose.yml files exist
          if [ ! -f \$REPO_DIR/docker-compose.yml ]; then
            echo "docker-compose.yml file not found in \$REPO_DIR!"
            exit 1
          fi
          echo ".env and docker-compose.yml files found."
          EOF

      - name: Automation Backoffice UI Deployment
        run: |
          echo "Deploying with Docker Compose"
          ssh -i ./key.pem ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} <<EOF
          REPO_DIR=~/ONDC-automation-framework-staging/automation-backoffice
          cd \$REPO_DIR

          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml file not found!"
            exit 1
          fi

          # Start the containers using Docker Compose
          echo "Running docker-compose up -d --build"
          sudo docker compose -p automation-staging up -d --build
          EOF
